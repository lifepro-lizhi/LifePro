from django.shortcuts import render, redirect, get_object_or_404
from django.views.generic import (ListView, DetailView, CreateView, UpdateView,
                                  DeleteView, TemplateView)
from .models import Blog, Comment
from django.utils import timezone
from django.urls import reverse_lazy, reverse
from .forms import BlogCreateForm, BlogPublishForm
from Comment.forms import CommentForm
from django.contrib.auth.mixins import UserPassesTestMixin
from django.views.generic.edit import FormMixin, FormView
from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponseForbidden


# Create your views here.


class BlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(draft__exact=False).\
                                   filter(publish_date__lte=timezone.now()).\
                                   order_by('publish_date')


class BlogCreateView(UserPassesTestMixin, CreateView):
    model = Blog
    form_class = BlogCreateForm
    template_name = 'blog/blog_create.html'
    # fields = ('blog_title', 'blog_content')
    success_url = reverse_lazy('blog:blog_list')

    def test_func(self):
        return self.request.user.is_superuser


def publish(request, pk):
    blog = get_object_or_404(Blog, pk=pk)
    if blog.draft is True:
        publish_form = BlogPublishForm()
        context = {"publish_form": publish_form, }
        return render(request, 'Blog/blog_publish.html', context)


# class CommentFormView(FormView):
#     form_class = CommentForm
#     success_url = reverse_lazy('blog:blog_detail')
#     template_name = 'blog/blog_comment_form.html'


class BlogDetailView(FormMixin, DetailView):
    model = Blog
    context_object_name = 'blog'
    template_name = 'blog/blog_detail.html'
    form_class = CommentForm
    # success_url = reverse_lazy('blog:blog_detail', kwargs={'pk': 1, })

    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)

        # content_type = ContentType.objects.get_for_model(Blog)
        # obj_id = self.kwargs['pk']
        # comments = Comment.objects.filter(content_type=content_type,
        #                                   object_id=obj_id)

        instance = Blog.objects.get(id=self.kwargs['pk'])
        comments = Comment.objects.filter_by_instance(instance)

        # content_type = ContentType.objects.get_for_model(instance.__class__)
        # obj_id = self.kwargs['pk']
        # initial_data = {'content_type': instance.get_content_type(),
        #                 'object_id': obj_id}
        # comment_form = CommentForm(initial=initial_data)
        comment_form = CommentForm()

        context['comments'] = comments
        context['comment_form'] = comment_form
        return context

    def post(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            # return HttpResponseForbidden()
            return redirect(reverse('users:login'))
        self.object = self.get_object()
        form = self.get_form()

        blog = Blog.objects.get(id=self.kwargs['pk'])
        if form.is_valid():
            print('form valid')
            content_type = ContentType.objects.get_for_model(Blog)
            obj_id = self.kwargs['pk']
            parent_id = request.POST.get('parent_id')
            # try:
            #     parent_id = request.POST.get['parent_id']
            # except:
            #     parent_id = None

            if parent_id is not None:
                parent_qs = Comment.objects.filter(id=parent_id)
                if parent_qs.exists():
                    parent_obj = parent_qs.first()
                else:
                    parent_obj = None
            else:
                parent_obj = None

            form.save(commit=False)
            comment_new = Comment(user=request.user,
                                  content_type=content_type,
                                  object_id=obj_id,
                                  content=form.cleaned_data.get('content'),
                                  parent=parent_obj)
            comment_new.save()
            # return self.form_valid(form)
            return redirect(blog)
        else:
            print('form invalid')
            print(form.errors)
            return self.form_invalid(form)

            
class DraftDetail(DetailView):
    model = Blog
    context_object_name = 'blog'
    template_name = 'blog/draft_detail.html'


class BlogUpdateView(UserPassesTestMixin, UpdateView):
    model = Blog
    context_object_name = 'blog'
    form_class = BlogCreateForm
    template_name_suffix = "_create"
    # success_url = reverse_lazy('blog:blog_detail', kwargs={'pk': object.pk})
    # redirect_field_name = 'blog/blog_detail.html'

    def get_success_url(self):
        return reverse_lazy('blog:blog_detail',
                            kwargs={'pk': self.get_object().id})

    def test_func(self):
        return self.request.user.is_superuser


class BlogDeleteView(UserPassesTestMixin, DeleteView):
    model = Blog
    success_url = reverse_lazy('blog:blog_list')
    context_object_name = 'blog'

    def test_func(self):
        return self.request.user.is_superuser


class PythonBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='Python').\
                                   order_by('publish_date')


class DjangoBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='Django').\
                                   order_by('publish_date')


class MachineLearningBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='Machine Learning').\
                                   order_by('publish_date')


class PostgresqlBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='PostgreSQL').\
                                   order_by('publish_date')


class UnityBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='PostgreSQL').\
                                   order_by('publish_date')


class MacBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='Mac').\
                                   order_by('publish_date')


class JapaneseBlogListView(ListView):
    model = Blog
    template_name = 'blog_list.html'
    context_object_name = 'blogs'

    def get_queryset(self):
        return Blog.objects.filter(category__exact='日本語').\
                                   order_by('publish_date')
